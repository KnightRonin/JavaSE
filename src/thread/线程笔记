1、进程和线程的区别
	进程：一个应用程序就是一个进程
	线程：一个进程里面有多个线程
	进程不可以并发，但线程可以并发
2、如何创建进程
	2.1 直接继承Thread类，重写run方法
	2.2 编写一个类，实现Runnable接口，实现run方法(常用，面向接口编程)
3、线程的生命周期（5个）
	新建状态：新创建了一个线程对象
	就绪状态：线程对象创建后，其他线程调用了该对象的start()方法后，该状态的线程位于可运行的线程池中，等待获取CPU的使用权
	运行状态：获取CPU资源，执行代码片段
	阻塞状态：线程因为某种原因放弃CPU使用权，暂时停止运行，直到线程进入就绪状态，才有机会进入运行状态
		-- 等待阻塞：运行的线程执行wait()方法，JVM会把该线程放到等待池中（wait会释放所有的锁）
		-- 同步阻塞：运行的线程在获取对象的同步锁时，若该同步锁被其他的线程占用，则JVM会把该线程放到锁池中
		-- 其他阻塞：运行的线程执行sleep()或join()，或则发出了IO请求时，JVM会把该线程设置为阻塞状态。当sleep()状态超时
		   join()等待线程终止或者超时、或者IO处理完毕时，线程重新转入就绪状态
	死亡状态：线程执行完了或因异常退出了run()方法，该线程结束生命周期
4、如何获取线程对象、线程的名字、修改线程的名字
	如何获取线程对象
		Thread.currentThread()
	线程的名字
		线程对象.getName()
	修改线程的名字
		线程对象.setName()
5、线程休眠sleep()方法
	Thread.sleep(1000)
	里面的单位是毫秒，这句代码出现在哪里，哪个线程就会睡觉
6、如何终止睡眠
	线程对象.interrupt()
7、如何强行终止线程
	调用stop()，但会导致数据丢失，不建议使用
	那如何合理的终止线程？打一个boolean标记
8、线程的调度
	8.1 常见的调度模型
		抢占式调度模型
			那个线程的优先级高抢到CPU时间片的概率就高一点
			java采用的就是这种模式
		均分式调度模型
			平均分配CPU时间片，每个线程占有的CPU的时间片长度一样
			平均分配，一切平等
			有些编程语言，采用的是这种调度方式
	8.2 java中哪些方法是和线程调度有关
		实例方法
			void setPriority(int newPriority) 设置线程的优先级
			int setPriority 获取线程的优先级
			默认优先级 5
			最高优先级 10
			最低优先级 1
		静态方法
			static void yield() 让位方法【暂停当前的线程，执行其他线程】
9、多线程并发环境下，数据的安全问题【线程安全这个十分重要】
	9.1 以后的项目会放到服务器上运行，我们需要关注的多线程下的数据安全
	9.2 什么时候数据在多线程的环境下会存在安全问题
		三个条件
			条件1：多线程并发
			条件2：有共享数据
			条件3：共享数据有修改的行为
		满足以上三个条件就会存在线程安全问题

	9.3 如何解决线程安全问题（使用”线程同步机制“）
		线程排队执行（不能并发），即用线程排队解决线程安全问题，这种机制称为：线程同步机制，但这种机制会降低效率。
	9.4 关于线程，涉及到两个专业术语
		异步编程模型：（效率高）
			线程1和线程2各自执行，互不干扰
		同步编程模型：（效率低）
			线程1的执行需要线程2执行完，这两个线程之间存在等待关系
		口诀：异步就是并发，同步就是排队
	9.5 线程同步机制的语法是
	synchronize(){
		线程同步代码块
	}
	synchronize小括号中传入的数据是相当关键的，这个数据必须是共享数据，才能达到多线程同步
10、java中三大变量
	实例变量：在堆中

	静态变量：在方法区中

	局部变量：在栈中

	注意：局部变量永远不会发生线程安全问题


